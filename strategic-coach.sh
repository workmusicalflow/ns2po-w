#!/bin/bash

# --- Hook "UserPromptSubmit" ---
# R√¥le : Agir comme un coach strat√©gique avant chaque action de Claude.
# Se d√©clenche avant que Claude ne traite l'invite de l'utilisateur.

# Lit le contexte de l'√©v√©nement depuis l'entr√©e standard
CONTEXT=$(cat)

# Extrait le prompt de l'utilisateur avec jq
PROMPT=$(echo "$CONTEXT" | jq -r '.prompt')

# Heuristique simple pour d√©tecter une intention de cr√©ation/modification
# On recherche des verbes d'action au d√©but du prompt
if [[ "$PROMPT" =~ ^(ajoute|cr√©e|impl√©mente|modifie|construis|d√©veloppe|fais) ]]; then
    
    echo "ü§î [Coach Strat√©gique] Nouvelle t√¢che de d√©veloppement d√©tect√©e. Analyse de la valeur..." >&2
    
    # Appeler le Pareto-Planner MCP pour classifier la t√¢che.
    # La sortie JSON de cet outil sera automatiquement inject√©e dans le contexte que Claude recevra.
    # Cela force Claude √† prendre connaissance de la classification (Core 20% ou Enhancement 80%)
    # avant m√™me de commencer √† r√©fl√©chir √† la solution.
    claude mcp call pareto-planner classify_task_value --task_description "$PROMPT"
fi

# Le hook doit toujours se terminer avec un code de sortie 0 pour ne pas bloquer Claude.
exit 0
