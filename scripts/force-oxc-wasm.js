#!/usr/bin/env node
// Script pour forcer oxc-parser et oxc-transform √† utiliser leur fallback WASM via variables d'environnement

console.log('üîß Configuration d\'oxc-parser et oxc-transform en mode WASM...');

// Force les variables d'environnement WASM de mani√®re d√©finitive
process.env.FORCE_WASM = '1';
process.env.USE_WASM = 'true';
process.env.DISABLE_NATIVE_BINDINGS = 'true';
process.env.NETLIFY = 'true';
process.env.NETLIFY_BUILD = 'true';
process.env.NAPI_RS_FORCE_WASI = '1';
process.env.WEBCONTAINER = '1';
// Variables sp√©cifiques pour oxc-transform
process.env.OXC_FORCE_WASM = 'true';
process.env.OXLINT_FORCE_WASM = '1';

console.log('‚úÖ Variables d\'environnement WASM configur√©es:');
console.log('   FORCE_WASM=1');
console.log('   USE_WASM=true');
console.log('   DISABLE_NATIVE_BINDINGS=true');
console.log('   NETLIFY=true');
console.log('   NAPI_RS_FORCE_WASI=1');
console.log('   OXC_FORCE_WASM=true');
console.log('   OXLINT_FORCE_WASM=1');

// Test que le binding WASM est disponible
const fs = require('fs');
const path = require('path');

try {
  // V√©rifier que les bindings WASM sont install√©s
  const parserWasmPath = path.join(process.cwd(), 'node_modules/@oxc-parser/binding-wasm32-wasi');
  const transformWasmPath = path.join(process.cwd(), 'node_modules/@oxc-transform/binding-wasm32-wasi');

  if (fs.existsSync(parserWasmPath)) {
    console.log('‚úÖ @oxc-parser/binding-wasm32-wasi disponible');
  } else {
    console.log('‚ö†Ô∏è  @oxc-parser/binding-wasm32-wasi non trouv√©');
  }

  if (fs.existsSync(transformWasmPath)) {
    console.log('‚úÖ @oxc-transform/binding-wasm32-wasi disponible');
  } else {
    console.log('‚ö†Ô∏è  @oxc-transform/binding-wasm32-wasi non trouv√©');
  }

  // Test basique du require (optionnel)
  console.log('üß™ Test de require des bindings WASM...');
  const parserWasm = require('@oxc-parser/binding-wasm32-wasi');
  console.log('‚úÖ Parser WASM charg√© avec succ√®s');

  const transformWasm = require('@oxc-transform/binding-wasm32-wasi');
  console.log('‚úÖ Transform WASM charg√© avec succ√®s');

} catch (error) {
  console.log('‚ö†Ô∏è  Test binding WASM:', error.message);
  console.log('‚ÑπÔ∏è  Les bindings WASM seront utilis√©s via fallback automatique');
}

console.log('üéØ Configuration WASM termin√©e - oxc-parser et oxc-transform utiliseront WASM sur Netlify');