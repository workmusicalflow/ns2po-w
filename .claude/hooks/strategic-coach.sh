#!/bin/bash

# --- Hook "UserPromptSubmit" ---
# RÃ´le : Agir comme un coach stratÃ©gique avant chaque action de Claude.
# Se dÃ©clenche avant que Claude ne traite l'invite de l'utilisateur.

# Lit le contexte de l'Ã©vÃ©nement depuis l'entrÃ©e standard
CONTEXT=$(cat)

# Extrait le prompt de l'utilisateur avec jq
PROMPT=$(echo "$CONTEXT" | jq -r '.prompt')

# Heuristique simple pour dÃ©tecter une intention de crÃ©ation/modification
# On recherche des verbes d'action au dÃ©but du prompt
if [[ "$PROMPT" =~ ^(ajoute|crÃ©e|implÃ©mente|modifie|construis|dÃ©veloppe|fais) ]]; then
    
    echo "ðŸ¤” [Coach StratÃ©gique] Nouvelle tÃ¢che de dÃ©veloppement dÃ©tectÃ©e. Analyse de la valeur..." >&2
    
    # Afficher une suggestion pour prioriser selon le principe 80/20
    echo "ðŸ’¡ [Coach StratÃ©gique] Rappel du principe 80/20:" >&2
    echo "   â€¢ Core 20% : FonctionnalitÃ©s essentielles qui apportent 80% de la valeur" >&2
    echo "   â€¢ Enhancement 80% : AmÃ©liorations qui apportent 20% de valeur additionnelle" >&2
    echo "   ConsidÃ©rez si cette tÃ¢che fait partie du Core MVP ou des amÃ©liorations futures." >&2
fi

# Le hook doit toujours se terminer avec un code de sortie 0 pour ne pas bloquer Claude.
exit 0
