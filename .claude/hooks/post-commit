#!/bin/bash
#
# Git Hook: post-commit
# Auto-update CLAUDE.md apr√®s chaque commit
# NS2PO Context Engineering v1.0
#

# Configuration
HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$HOOK_DIR/../.." && pwd)"
UPDATER_SCRIPT="$HOOK_DIR/claude_context_updater.py"

# Logging function
log() {
    echo "[post-commit] $1" >&2
}

# Main execution
main() {
    log "üîÑ Mise √† jour automatique CLAUDE.md..."

    # V√©rifier que le script updater existe
    if [[ ! -f "$UPDATER_SCRIPT" ]]; then
        log "‚ö†Ô∏è Script updater non trouv√©: $UPDATER_SCRIPT"
        exit 0  # Ne pas bloquer le commit
    fi

    # V√©rifier que CLAUDE.md existe
    if [[ ! -f "$PROJECT_ROOT/CLAUDE.md" ]]; then
        log "‚ö†Ô∏è CLAUDE.md non trouv√© dans: $PROJECT_ROOT"
        exit 0  # Ne pas bloquer le commit
    fi

    # Ex√©cuter le script de mise √† jour
    cd "$PROJECT_ROOT"
    python3 "$UPDATER_SCRIPT"

    # Si CLAUDE.md a √©t√© modifi√©, l'ajouter au prochain commit
    if git diff --quiet CLAUDE.md; then
        log "‚ÑπÔ∏è CLAUDE.md d√©j√† √† jour"
    else
        log "‚úÖ CLAUDE.md mis √† jour automatiquement"
        git add CLAUDE.md

        # Cr√©er un commit automatique pour la mise √† jour
        git commit -m "docs(auto): update CLAUDE.md context engineering

ü§ñ Auto-generated context update:
- Migration status refresh
- Infrastructure health check
- Timeline and commands update

Generated by: claude_context_updater.py"

        log "üìù Commit automatique cr√©√© pour CLAUDE.md"
    fi
}

# Ex√©cution avec gestion d'erreur
if main; then
    log "üéØ Context engineering termin√© avec succ√®s"
else
    log "‚ö†Ô∏è Erreur lors de la mise √† jour (non bloquante)"
fi

exit 0  # Toujours retourner succ√®s pour ne pas bloquer git