#!/usr/bin/env node
/**
 * Script de test d'int√©gration compl√®te Campaign Bundles
 * Valide le syst√®me complet : API, Cache, Fallback, Airtable
 *
 * Usage: node scripts/test-campaign-bundles-integration.mjs [--verbose]
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configuration
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Arguments
const args = process.argv.slice(2);
const verbose = args.includes('--verbose');

console.log('üß™ Test d\'int√©gration compl√®te Campaign Bundles');
console.log('üìä Mode:', verbose ? 'VERBOSE' : 'STANDARD');
console.log('');

// =====================================
// CONFIGURATION TESTS
// =====================================

const TEST_CONFIG = {
  // URL de l'application (local ou d√©ploy√©e)
  APP_URL: process.env.NUXT_PUBLIC_SITE_URL || 'http://localhost:3000',

  // Airtable (optionnel pour tests API)
  AIRTABLE_API_KEY: process.env.AIRTABLE_API_KEY,
  AIRTABLE_BASE_ID: process.env.AIRTABLE_BASE_ID,

  // Tests √† ex√©cuter
  TESTS: {
    STATIC_DATA: true,        // Test des donn√©es statiques
    API_ROUTES: true,         // Test des routes API
    CACHE_SYSTEM: true,       // Test du syst√®me de cache
    FALLBACK_MECHANISM: true, // Test du fallback
    PERFORMANCE: true         // Test de performance
  }
};

// =====================================
// UTILITAIRES
// =====================================

class TestRunner {
  constructor() {
    this.results = {
      total: 0,
      passed: 0,
      failed: 0,
      errors: []
    };
  }

  async test(name, testFn) {
    this.results.total++;
    try {
      console.log(`üîç ${name}...`);
      const startTime = Date.now();

      await testFn();

      const duration = Date.now() - startTime;
      this.results.passed++;
      console.log(`  ‚úÖ ${name} (${duration}ms)`);

      if (verbose) {
        console.log(`     Dur√©e: ${duration}ms`);
      }
    } catch (error) {
      this.results.failed++;
      this.results.errors.push({ test: name, error: error.message });
      console.log(`  ‚ùå ${name}: ${error.message}`);

      if (verbose) {
        console.log(`     Stack: ${error.stack}`);
      }
    }
  }

  generateReport() {
    const successRate = (this.results.passed / this.results.total * 100).toFixed(1);

    console.log('\nüéâ RAPPORT DE TEST');
    console.log('='.repeat(50));
    console.log(`üìä Total: ${this.results.total}`);
    console.log(`‚úÖ R√©ussis: ${this.results.passed}`);
    console.log(`‚ùå √âchou√©s: ${this.results.failed}`);
    console.log(`üìà Taux de succ√®s: ${successRate}%`);

    if (this.results.errors.length > 0) {
      console.log('\n‚ùå Erreurs d√©taill√©es:');
      this.results.errors.forEach((error, index) => {
        console.log(`   ${index + 1}. ${error.test}: ${error.error}`);
      });
    }

    const isSuccess = this.results.failed === 0;
    console.log('\n' + '='.repeat(50));

    if (isSuccess) {
      console.log('üéâ TOUS LES TESTS PASS√âS ! L\'int√©gration fonctionne parfaitement.');
    } else {
      console.log('‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â. V√©rifiez les erreurs ci-dessus.');
    }

    return isSuccess;
  }
}

// =====================================
// TESTS UNITAIRES
// =====================================

async function testStaticData() {
  // Test 1: V√©rification de l'existence et structure des donn√©es statiques
  try {
    const fs = await import('fs');
    const path = await import('path');

    // Chemin correct vers le fichier TypeScript
    const staticDataPath = path.join(__dirname, '../../../packages/types/src/campaign-bundles-data.ts');

    if (!fs.existsSync(staticDataPath)) {
      throw new Error(`Fichier de donn√©es statiques non trouv√©: ${staticDataPath}`);
    }

    // Lecture et v√©rification du contenu
    const content = fs.readFileSync(staticDataPath, 'utf-8');

    // V√©rifications de structure par regex
    const expectedBundles = ['pack-argent-001', 'pack-or-001', 'pack-platinium-001'];
    for (const bundleId of expectedBundles) {
      if (!content.includes(bundleId)) {
        throw new Error(`Bundle attendu non trouv√© dans le fichier: ${bundleId}`);
      }
    }

    // V√©rification que les exports sont pr√©sents
    if (!content.includes('export const campaignBundles')) {
      throw new Error('Export campaignBundles non trouv√©');
    }

    // V√©rification des champs requis
    const requiredFields = ['id:', 'name:', 'description:', 'estimatedTotal:', 'products:'];
    for (const field of requiredFields) {
      if (!content.includes(field)) {
        throw new Error(`Champ requis non trouv√©: ${field}`);
      }
    }

    if (verbose) {
      console.log(`     Fichier trouv√©: ${staticDataPath}`);
      console.log(`     Taille: ${content.length} caract√®res`);
    }

  } catch (error) {
    throw new Error(`Erreur v√©rification donn√©es statiques: ${error.message}`);
  }
}

async function testAPIRoutes() {
  // Test des routes API (si serveur d√©marr√©)
  const routes = [
    '/api/campaign-bundles',
    '/api/campaign-bundles/pack-argent-001'
  ];

  for (const route of routes) {
    try {
      const url = `${TEST_CONFIG.APP_URL}${route}`;
      const response = await fetch(url);

      if (!response.ok) {
        // Si 404, le serveur n'est peut-√™tre pas d√©marr√©
        if (response.status === 404) {
          throw new Error(`Route non trouv√©e: ${route} (serveur d√©marr√© ?)`);
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();

      if (route === '/api/campaign-bundles') {
        if (!Array.isArray(data) || data.length === 0) {
          throw new Error('API doit retourner un tableau non vide');
        }
      } else {
        if (!data || !data.id) {
          throw new Error('API doit retourner un bundle avec un id');
        }
      }

      if (verbose) {
        console.log(`     ${route}: ${response.status} - ${JSON.stringify(data).substring(0, 100)}...`);
      }

    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        throw new Error(`Serveur non accessible sur ${TEST_CONFIG.APP_URL} (d√©marr√© ?)`);
      }
      throw error;
    }
  }
}

async function testCacheSystem() {
  // Test du syst√®me de cache - v√©rification de l'existence et structure
  try {
    const fs = await import('fs');
    const path = await import('path');

    // V√©rifier l'existence du fichier cache
    const cachePath = path.join(__dirname, '../composables/useCache.ts');

    if (!fs.existsSync(cachePath)) {
      throw new Error(`Fichier useCache.ts non trouv√©: ${cachePath}`);
    }

    // Lecture et v√©rification du contenu
    const content = fs.readFileSync(cachePath, 'utf-8');

    // V√©rifier les fonctions essentielles du cache
    const requiredFunctions = [
      'export const useCache',
      'const get =',
      'const set =',
      'const remove =',
      'const clear =',
      'const getOrSet =',
      'const invalidateByTags =',
      'const invalidateByPattern =',
      'const cleanExpiredEntries ='
    ];

    for (const func of requiredFunctions) {
      if (!content.includes(func)) {
        throw new Error(`Fonction cache manquante: ${func}`);
      }
    }

    // V√©rifier les types/interfaces essentiels
    const requiredTypes = [
      'interface CacheEntry',
      'interface CacheOptions',
      'interface CacheStats'
    ];

    for (const type of requiredTypes) {
      if (!content.includes(type)) {
        throw new Error(`Type cache manquant: ${type}`);
      }
    }

    // V√©rifier la pr√©sence de fonctionnalit√©s avanc√©es
    const advancedFeatures = [
      'TTL', 'LRU', 'memoryCache', 'cacheStats', 'evictIfNeeded'
    ];

    for (const feature of advancedFeatures) {
      if (!content.includes(feature)) {
        throw new Error(`Fonctionnalit√© cache manquante: ${feature}`);
      }
    }

    if (verbose) {
      console.log(`     Fichier cache trouv√©: ${cachePath}`);
      console.log(`     Taille: ${content.length} caract√®res`);
      console.log(`     Fonctions d√©tect√©es: ${requiredFunctions.length}`);
    }

  } catch (error) {
    throw new Error(`Erreur test cache: ${error.message}`);
  }
}

async function testFallbackMechanism() {
  // Test du m√©canisme de fallback - v√©rification de l'existence et structure
  try {
    const fs = await import('fs');
    const path = await import('path');

    // V√©rifier l'existence du composable
    const composablePath = path.join(__dirname, '../composables/useCampaignBundles.ts');

    if (!fs.existsSync(composablePath)) {
      throw new Error(`Fichier useCampaignBundles.ts non trouv√©: ${composablePath}`);
    }

    // Lecture et v√©rification du contenu
    const content = fs.readFileSync(composablePath, 'utf-8');

    // V√©rifier les fonctions essentielles du composable
    const requiredFeatures = [
      'export const useCampaignBundles',
      'apiCampaignBundles',
      'useStaticFallback',
      'currentBundles',
      'getBundleById',
      'refreshBundles',
      '$fetch',
      'staticCampaignBundles'
    ];

    for (const feature of requiredFeatures) {
      if (!content.includes(feature)) {
        throw new Error(`Fonctionnalit√© fallback manquante: ${feature}`);
      }
    }

    // V√©rifier la logique de fallback
    const fallbackLogic = [
      'useStaticFallback.value',
      'staticCampaignBundles',
      'apiCampaignBundles.value',
      'catch',
      'error'
    ];

    for (const logic of fallbackLogic) {
      if (!content.includes(logic)) {
        throw new Error(`Logique fallback manquante: ${logic}`);
      }
    }

    if (verbose) {
      console.log(`     Composable fallback trouv√©: ${composablePath}`);
      console.log(`     Taille: ${content.length} caract√®res`);
      console.log(`     Fonctionnalit√©s d√©tect√©es: ${requiredFeatures.length}`);
    }

  } catch (error) {
    throw new Error(`Erreur test fallback: ${error.message}`);
  }
}

async function testPerformance() {
  // Test de performance basique - lecture de fichiers
  const iterations = 100;
  const startTime = Date.now();

  try {
    const fs = await import('fs');
    const path = await import('path');

    // Test de lecture r√©p√©t√©e (simule l'utilisation intensive)
    const staticDataPath = path.join(__dirname, '../../../packages/types/src/campaign-bundles-data.ts');

    if (!fs.existsSync(staticDataPath)) {
      throw new Error('Fichier de donn√©es statiques non trouv√© pour test performance');
    }

    for (let i = 0; i < iterations; i++) {
      const content = fs.readFileSync(staticDataPath, 'utf-8');
      if (content.length < 1000) {
        throw new Error('Donn√©es corrompues lors du test de performance');
      }

      // Simulation d'un parsing basique
      const bundleCount = (content.match(/pack-.*-001/g) || []).length;
      if (bundleCount !== 3) {
        throw new Error(`Nombre de bundles incorrect: ${bundleCount}`);
      }
    }

    const duration = Date.now() - startTime;
    const avgTime = duration / iterations;

    // Seuil de performance: moins de 10ms par lecture en moyenne
    if (avgTime > 10) {
      throw new Error(`Performance insuffisante: ${avgTime.toFixed(2)}ms/lecture (seuil: 10ms)`);
    }

    if (verbose) {
      console.log(`     ${iterations} lectures en ${duration}ms (${avgTime.toFixed(2)}ms/lecture)`);
    }

  } catch (error) {
    throw new Error(`Erreur test performance: ${error.message}`);
  }
}

async function testMigrationScriptLogic() {
  // Test de la logique du script de migration (sans ex√©cution)
  try {
    const migrationScript = await import('./migrate-campaign-bundles-to-airtable.mjs');

    // V√©rifier que le script peut √™tre import√© sans erreur
    if (verbose) {
      console.log(`     Script de migration import√© avec succ√®s`);
    }

  } catch (error) {
    throw new Error(`Erreur import script migration: ${error.message}`);
  }
}

// =====================================
// EXECUTION PRINCIPALE
// =====================================

async function main() {
  const runner = new TestRunner();

  console.log('üöÄ D√©marrage des tests d\'int√©gration...\n');

  // Tests des donn√©es statiques
  if (TEST_CONFIG.TESTS.STATIC_DATA) {
    await runner.test('Donn√©es statiques Campaign Bundles', testStaticData);
  }

  // Tests du syst√®me de cache
  if (TEST_CONFIG.TESTS.CACHE_SYSTEM) {
    await runner.test('Syst√®me de cache', testCacheSystem);
  }

  // Tests du m√©canisme de fallback
  if (TEST_CONFIG.TESTS.FALLBACK_MECHANISM) {
    await runner.test('M√©canisme de fallback', testFallbackMechanism);
  }

  // Tests de performance
  if (TEST_CONFIG.TESTS.PERFORMANCE) {
    await runner.test('Performance', testPerformance);
  }

  // Test de la logique de migration
  await runner.test('Logique script de migration', testMigrationScriptLogic);

  // Tests des routes API (si serveur disponible)
  if (TEST_CONFIG.TESTS.API_ROUTES) {
    await runner.test('Routes API Campaign Bundles (optionnel)', async () => {
      try {
        await testAPIRoutes();
      } catch (error) {
        if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {
          console.log('     ‚ö†Ô∏è Serveur non accessible - test ignor√© (normal en d√©veloppement)');
          return; // Test r√©ussi mais ignor√©
        }
        throw error; // Autre erreur, on la remonte
      }
    });
  }

  // G√©n√©ration du rapport final
  const success = runner.generateReport();

  // Recommandations post-test
  console.log('\nüìù Prochaines √©tapes recommand√©es:');
  if (success) {
    console.log('   1. ‚úÖ Ex√©cuter la migration: node scripts/migrate-campaign-bundles-to-airtable.mjs --dry-run');
    console.log('   2. ‚úÖ Configurer les automations Airtable selon le guide');
    console.log('   3. ‚úÖ Tester en production avec donn√©es r√©elles');
    console.log('   4. ‚úÖ D√©ployer sur Vercel');
  } else {
    console.log('   1. ‚ùå Corriger les erreurs d√©tect√©es ci-dessus');
    console.log('   2. ‚ùå Relancer les tests jusqu\'√† 100% de succ√®s');
    console.log('   3. ‚ùå V√©rifier la configuration d\'environnement');
  }

  process.exit(success ? 0 : 1);
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
  console.error('\nüí• Erreur non g√©r√©e:', error);
  process.exit(1);
});

// Lancement du script
main();