#!/usr/bin/env node

/**
 * Script de test pour d√©clencher la synchronisation des assets Cloudinary
 * Lance avec: node scripts/sync-cloudinary-assets.js
 */

import fetch from 'node-fetch'
import 'dotenv/config'

const NUXT_BASE_URL = process.env.NUXT_BASE_URL || 'http://localhost:3001'
const SYNC_ENDPOINT = `${NUXT_BASE_URL}/api/admin/sync-assets`

async function runSyncTest() {
  console.log('üöÄ Test de synchronisation Cloudinary vers Turso')
  console.log(`üì° Endpoint: ${SYNC_ENDPOINT}`)
  console.log()

  const startTime = Date.now()

  try {
    console.log('‚è≥ Envoi de la requ√™te de synchronisation...')

    const response = await fetch(SYNC_ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      }
    })

    const duration = Date.now() - startTime
    console.log(`‚è±Ô∏è  R√©ponse re√ßue en ${duration}ms`)

    if (!response.ok) {
      const errorData = await response.text()
      console.error(`‚ùå Erreur HTTP ${response.status}: ${response.statusText}`)
      console.error('üìÑ D√©tails:', errorData)
      process.exit(1)
    }

    const result = await response.json()
    console.log()
    console.log('‚úÖ Synchronisation termin√©e avec succ√®s!')
    console.log()

    if (result.success) {
      console.log('üìä R√©sultats:')
      console.log(`   ‚Ä¢ Total trait√©: ${result.data.totalProcessed} assets`)
      console.log(`   ‚Ä¢ Nouveaux: ${result.data.totalSynced} assets`)
      console.log(`   ‚Ä¢ Mis √† jour: ${result.data.totalUpdated} assets`)
      console.log(`   ‚Ä¢ Erreurs: ${result.data.totalErrors}`)
      console.log(`   ‚Ä¢ Dur√©e: ${Math.round(result.data.duration / 1000)}s`)
      console.log()
      console.log(`üí¨ Message: ${result.message}`)
    } else {
      console.log('‚ö†Ô∏è  Synchronisation termin√©e avec des probl√®mes')
      console.log('üìÑ R√©ponse:', JSON.stringify(result, null, 2))
    }

  } catch (error) {
    const duration = Date.now() - startTime
    console.error()
    console.error(`‚ùå Erreur apr√®s ${duration}ms:`, error.message)
    console.error('üîç D√©tails:', error)

    if (error.code === 'ECONNREFUSED') {
      console.error()
      console.error('üí° Conseil: V√©rifiez que le serveur Nuxt est d√©marr√© sur le port 3001')
      console.error('   Commande: pnpm dev')
    }

    process.exit(1)
  }
}

// V√©rifications pr√©alables
if (!process.env.TURSO_DATABASE_URL || !process.env.CLOUDINARY_CLOUD_NAME) {
  console.error('‚ùå Variables d\'environnement manquantes:')
  if (!process.env.TURSO_DATABASE_URL) console.error('   ‚Ä¢ TURSO_DATABASE_URL')
  if (!process.env.CLOUDINARY_CLOUD_NAME) console.error('   ‚Ä¢ CLOUDINARY_CLOUD_NAME')
  console.error()
  console.error('üí° V√©rifiez votre fichier .env')
  process.exit(1)
}

console.log('üîß Configuration:')
console.log(`   ‚Ä¢ Turso: ${process.env.TURSO_DATABASE_URL.split('@')[1] || 'Configur√©'}`)
console.log(`   ‚Ä¢ Cloudinary: ${process.env.CLOUDINARY_CLOUD_NAME}`)
console.log()

// Lancer le test
runSyncTest()