/**
 * API Route: DELETE /api/categories/[id]
 * Supprime une cat√©gorie existante de la base Turso
 */

import { getDatabase } from "../utils/database"

export default defineEventHandler(async (event) => {
  const startTime = Date.now()

  try {
    const categoryId = getRouterParam(event, 'id')
    console.log(`üìÇ DELETE /api/categories/${categoryId} - Suppression cat√©gorie`)

    if (!categoryId) {
      throw createError({
        statusCode: 400,
        statusMessage: 'ID de la cat√©gorie requis'
      })
    }

    // Acc√®s √† la base de donn√©es
    const db = getDatabase()
    if (!db) {
      throw createError({
        statusCode: 500,
        statusMessage: 'Base de donn√©es non disponible'
      })
    }

    // V√©rifier que la cat√©gorie existe
    const existingCategory = await db.execute({
      sql: 'SELECT id, name FROM categories WHERE id = ?',
      args: [categoryId]
    })

    if (existingCategory.rows.length === 0) {
      throw createError({
        statusCode: 404,
        statusMessage: 'Cat√©gorie non trouv√©e'
      })
    }

    const categoryName = existingCategory.rows[0].name

    try {
      // V√©rifier si la cat√©gorie a des sous-cat√©gories
      const subcategoriesCheck = await db.execute({
        sql: 'SELECT COUNT(*) as count FROM categories WHERE parent_id = ?',
        args: [categoryId]
      })

      const subcategoriesCount = subcategoriesCheck.rows[0].count as number

      if (subcategoriesCount > 0) {
        throw createError({
          statusCode: 409,
          statusMessage: `Impossible de supprimer la cat√©gorie. Elle contient ${subcategoriesCount} sous-cat√©gorie(s).`,
          data: {
            reason: 'has_subcategories',
            subcategoriesCount
          }
        })
      }

      // V√©rifier si la cat√©gorie est utilis√©e dans des produits
      const productsUsage = await db.execute({
        sql: 'SELECT COUNT(*) as count FROM products WHERE category = ? OR subcategory = ?',
        args: [categoryName, categoryName]
      })

      const productsCount = productsUsage.rows[0].count as number

      if (productsCount > 0) {
        throw createError({
          statusCode: 409,
          statusMessage: `Impossible de supprimer la cat√©gorie. Elle est utilis√©e par ${productsCount} produit(s).`,
          data: {
            reason: 'category_in_use',
            productsCount
          }
        })
      }

      // V√©rifier si la cat√©gorie est utilis√©e dans des bundles (via les produits)
      const bundlesUsage = await db.execute({
        sql: `SELECT COUNT(DISTINCT bp.bundle_id) as count
        FROM bundle_products bp
        JOIN products p ON bp.product_id = p.id
        WHERE p.category = ? OR p.subcategory = ?`,
        args: [categoryName, categoryName]
      })

      const bundlesCount = bundlesUsage.rows[0].count as number

      if (bundlesCount > 0) {
        throw createError({
          statusCode: 409,
          statusMessage: `Impossible de supprimer la cat√©gorie. Elle est utilis√©e indirectement dans ${bundlesCount} bundle(s).`,
          data: {
            reason: 'category_in_bundles',
            bundlesCount
          }
        })
      }

      // Supprimer la cat√©gorie
      await db.execute({
        sql: 'DELETE FROM categories WHERE id = ?',
        args: [categoryId]
      })

      console.log(`‚úÖ Cat√©gorie supprim√©e avec succ√®s: ${categoryId} (${categoryName})`)

      const response = {
        success: true,
        message: `Cat√©gorie "${categoryName}" supprim√©e avec succ√®s`,
        data: {
          id: categoryId,
          deletedAt: new Date().toISOString()
        },
        source: 'turso',
        duration: Date.now() - startTime
      }

      // Cache headers
      setHeader(event, "Cache-Control", "no-cache")

      return response

    } catch (dbError) {
      console.error('‚ùå Erreur base de donn√©es:', dbError)

      // Si c'est une erreur de contrainte, la renvoyer telle quelle
      if (dbError.statusCode) {
        throw dbError
      }

      throw createError({
        statusCode: 500,
        statusMessage: 'Erreur lors de la suppression de la cat√©gorie',
        data: { error: dbError.message }
      })
    }

  } catch (error) {
    console.error(`‚ùå Erreur DELETE /api/categories/${getRouterParam(event, 'id')}:`, error)

    if (error.statusCode) {
      throw error
    }

    throw createError({
      statusCode: 500,
      statusMessage: 'Erreur interne du serveur',
      data: {
        error: error instanceof Error ? error.message : "Erreur inconnue",
        duration: Date.now() - startTime
      }
    })
  }
})