/**
 * API Route: GET /api/campaign-bundles
 * R√©cup√®re tous les campaign bundles actifs depuis Airtable
 */

import { airtableService } from "~/services/airtable";
import type { BundleApiResponse } from "@ns2po/types";

export default defineEventHandler(async (event): Promise<BundleApiResponse> => {
  try {
    // Log de la requ√™te
    console.log("üì¶ GET /api/campaign-bundles - D√©but r√©cup√©ration");

    // R√©cup√©ration des query parameters
    const query = getQuery(event);
    const audience = query.audience as string | undefined;
    const featured = query.featured === "true";

    let bundles;

    // Filtrage par audience si sp√©cifi√©
    if (audience && audience !== "all") {
      console.log(`üéØ Filtrage par audience: ${audience}`);
      bundles = await airtableService.getCampaignBundlesByAudience(audience);
    } else {
      console.log("üìã R√©cup√©ration de tous les bundles");
      bundles = await airtableService.getCampaignBundles();
    }

    // Filtrage des bundles featured si demand√©
    if (featured) {
      bundles = bundles.filter(bundle => bundle.isFeatured);
      console.log(`‚≠ê Filtrage featured - ${bundles.length} bundles trouv√©s`);
    }

    console.log(`‚úÖ R√©cup√©ration r√©ussie: ${bundles.length} campaign bundles`);

    // Cache headers pour optimiser les performances
    setHeader(event, "Cache-Control", "public, max-age=900"); // 15 minutes
    setHeader(event, "CDN-Cache-Control", "public, max-age=1800"); // 30 minutes sur CDN

    return {
      success: true,
      data: bundles,
      pagination: {
        page: 1,
        limit: bundles.length,
        total: bundles.length,
        hasMore: false,
      },
    };
  } catch (error) {
    console.error("‚ùå Erreur GET /api/campaign-bundles:", error);

    // Status error appropri√©
    setResponseStatus(event, 500);

    return {
      success: false,
      error: error instanceof Error ? error.message : "Erreur interne du serveur",
    };
  }
});