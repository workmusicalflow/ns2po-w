/**
 * API Route pour r√©cup√©rer les informations de suivi d'une commande
 */

import type { CustomerInfo, OrderTrackingInfo, TrackingTimelineEvent } from '@ns2po/types'
import { createTursoClient, OrdersService, CustomersService, isValidTrackingReference, parseTrackingReference } from '@ns2po/database'

export default defineEventHandler(async (event) => {
  try {
    const reference = getRouterParam(event, 'reference')

    if (!reference) {
      throw createError({
        statusCode: 400,
        statusMessage: 'R√©f√©rence de suivi manquante'
      })
    }

    // Valider la r√©f√©rence
    if (!isValidTrackingReference(reference)) {
      return {
        success: false,
        trackingReference: reference,
        error: 'R√©f√©rence de suivi invalide'
      } as OrderTrackingInfo
    }

    // Connecter √† la base de donn√©es
    const db = createTursoClient()
    const ordersService = new OrdersService(db)
    const customersService = new CustomersService(db)

    // Chercher la commande par r√©f√©rence de suivi
    // Note: Dans notre impl√©mentation actuelle, nous utilisons la r√©f√©rence comme ID de commande
    const order = await ordersService.findById(reference)

    if (!order) {
      return {
        success: false,
        trackingReference: reference,
        error: 'Aucune commande trouv√©e avec cette r√©f√©rence'
      } as OrderTrackingInfo
    }

    // R√©cup√©rer les informations du client
    const customer = await customersService.findById(order.customer_id)

    if (!customer) {
      return {
        success: false,
        trackingReference: reference,
        error: 'Informations client introuvables'
      } as OrderTrackingInfo
    }

    // G√©n√©rer la timeline de suivi
    const timeline = generateOrderTimeline(order)

    // Formater la r√©ponse
    const trackingInfo: OrderTrackingInfo = {
      success: true,
      trackingReference: reference,
      order: {
        id: order.id,
        status: order.status,
        paymentStatus: order.payment_status,
        items: typeof order.items === 'string' ? JSON.parse(order.items) : order.items,
        totalAmount: order.total_amount,
        createdAt: order.created_at,
        estimatedDeliveryDate: order.estimated_delivery_date,
        actualDeliveryDate: order.actual_delivery_date,
        notes: order.notes
      },
      customer: {
        firstName: customer.first_name,
        lastName: customer.last_name,
        email: customer.email,
        phone: customer.phone
      },
      timeline
    }

    return trackingInfo

  } catch (error: any) {
    console.error('Erreur r√©cup√©ration suivi:', error)
    
    throw createError({
      statusCode: error.statusCode || 500,
      statusMessage: error.statusMessage || 'Erreur lors de la r√©cup√©ration des informations de suivi'
    })
  }
})

/**
 * G√©n√®re la timeline de suivi bas√©e sur le statut de la commande
 */
function generateOrderTimeline(order: any): TrackingTimelineEvent[] {
  const events: TrackingTimelineEvent[] = []
  const createdDate = new Date(order.created_at)

  // √âv√©nement de cr√©ation de commande
  events.push({
    date: createdDate.toLocaleDateString('fr-FR'),
    title: 'Commande re√ßue',
    description: 'Votre pr√©-commande a √©t√© enregistr√©e avec succ√®s',
    status: 'completed',
    icon: 'üìã'
  })

  // √âv√©nements bas√©s sur le statut de paiement
  if (order.payment_status === 'paid') {
    events.push({
      date: new Date(createdDate.getTime() + 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR'),
      title: 'Paiement confirm√©',
      description: 'Votre acompte a √©t√© re√ßu et confirm√©',
      status: 'completed',
      icon: 'üí∞'
    })
  } else {
    events.push({
      date: 'En attente',
      title: 'Paiement en attente',
      description: 'En attente du versement de l\'acompte',
      status: 'current',
      icon: '‚è≥'
    })
  }

  // √âv√©nements bas√©s sur le statut de la commande
  switch (order.status) {
    case 'pending_payment':
      // Pas d'√©v√©nements suppl√©mentaires
      break
      
    case 'paid':
    case 'processing':
      if (order.payment_status === 'paid') {
        events.push({
          date: new Date(createdDate.getTime() + 2 * 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR'),
          title: 'Commande en traitement',
          description: 'Pr√©paration des fichiers de production',
          status: 'current',
          icon: '‚öôÔ∏è'
        })
      }
      break
      
    case 'production':
      events.push({
        date: new Date(createdDate.getTime() + 3 * 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR'),
        title: 'Production en cours',
        description: 'Vos articles sont en cours de fabrication',
        status: 'current',
        icon: 'üè≠'
      })
      break
      
    case 'shipping':
      events.push({
        date: new Date(createdDate.getTime() + 10 * 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR'),
        title: 'Exp√©dition',
        description: 'Vos articles ont √©t√© exp√©di√©s',
        status: 'current',
        icon: 'üöö'
      })
      break
      
    case 'delivered':
      events.push({
        date: order.actual_delivery_date 
          ? new Date(order.actual_delivery_date).toLocaleDateString('fr-FR')
          : new Date(createdDate.getTime() + 12 * 24 * 60 * 60 * 1000).toLocaleDateString('fr-FR'),
        title: 'Livr√©',
        description: 'Votre commande a √©t√© livr√©e avec succ√®s',
        status: 'completed',
        icon: '‚úÖ'
      })
      break
      
    case 'cancelled':
      events.push({
        date: new Date().toLocaleDateString('fr-FR'),
        title: 'Commande annul√©e',
        description: 'Cette commande a √©t√© annul√©e',
        status: 'completed',
        icon: '‚ùå'
      })
      break
  }

  // Ajouter √©v√©nements futurs si pas encore livr√©s
  if (order.status !== 'delivered' && order.status !== 'cancelled') {
    const futureEvents = getFutureEvents(order, events.length)
    events.push(...futureEvents)
  }

  return events
}

/**
 * G√©n√®re les √©v√©nements futurs pr√©vus
 */
function getFutureEvents(order: any, currentEventCount: number): TrackingTimelineEvent[] {
  const events: TrackingTimelineEvent[] = []
  const createdDate = new Date(order.created_at)

  // Si pas encore en production
  if (order.status === 'pending_payment' || order.status === 'paid' || order.status === 'processing') {
    events.push({
      date: 'Pr√©vue',
      title: 'Production',
      description: 'Fabrication de vos articles personnalis√©s',
      status: 'pending',
      icon: 'üè≠'
    })
  }

  // Si pas encore exp√©di√©
  if (order.status !== 'shipping' && order.status !== 'delivered') {
    events.push({
      date: 'Pr√©vue',
      title: 'Exp√©dition',
      description: 'Envoi de votre commande',
      status: 'pending',
      icon: 'üöö'
    })
  }

  // Si pas encore livr√©
  if (order.status !== 'delivered') {
    const estimatedDate = order.estimated_delivery_date 
      ? new Date(order.estimated_delivery_date).toLocaleDateString('fr-FR')
      : '√Ä confirmer'
    
    events.push({
      date: estimatedDate,
      title: 'Livraison pr√©vue',
      description: 'R√©ception de votre commande',
      status: 'pending',
      icon: 'üì¶'
    })
  }

  return events
}