[build]
  # Build depuis la racine du monorepo pour pnpm workspaces
  base = "."

  # Commande de build avec patch WASM et ignore des optional dependencies
  command = "pnpm install --no-optional --ignore-scripts --frozen-lockfile && node scripts/force-oxc-wasm.js && pnpm --filter @ns2po/election-mvp build"

  # Répertoire de sortie après build
  publish = "apps/election-mvp/.output/public"

[build.environment]
  # Version Node.js stable LTS (compatible avec oxc-parser)
  NODE_VERSION = "20.18.0"
  # Utiliser pnpm comme gestionnaire de packages
  NPM_FLAGS = ""
  PNPM_VERSION = "9.1.0"
  # Force ignore des optional dependencies (native bindings)
  NPM_CONFIG_OPTIONAL = "false"
  NPM_CONFIG_IGNORE_SCRIPTS = "true"
  PNPM_IGNORE_SCRIPTS = "true"
  SKIP_INSTALL_OPTIONAL = "true"
  # Variables pour forcer l'utilisation de WASM au lieu des bindings natifs
  FORCE_WASM = "true"
  USE_WASM = "1"
  OXC_USE_WASM = "true"
  OXC_FORCE_WASM = "true"
  OXLINT_FORCE_WASM = "1"
  DISABLE_NATIVE_BINDINGS = "true"
  NETLIFY_BUILD = "true"
  # Pas de PNPM_FLAGS pour éviter les conflits avec workspaces

# Configuration des fonctions serverless pour les API routes Nuxt
[functions]
  # Répertoire des fonctions générées par Nuxt
  directory = "apps/election-mvp/.output/server"

# Redirections et règles de routage pour SPA Nuxt
[[redirects]]
  # Redirection pour les routes Nuxt (SPA fallback)
  from = "/*"
  to = "/index.html"
  status = 200
  conditions = {Role = ["public"]}

# Headers pour optimisation performance
[[headers]]
  for = "/_nuxt/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
  for = "/api/*"
  [headers.values]
    Cache-Control = "no-cache"

# Configuration spécifique monorepo
[build.processing]
  # Optimisations pour les images Cloudinary
  skip_processing = true

# Variables d'environnement pour le build (à compléter via dashboard Netlify)
[context.production.environment]
  NODE_ENV = "production"

[context.deploy-preview.environment]
  NODE_ENV = "production"

[context.branch-deploy.environment]
  NODE_ENV = "development"