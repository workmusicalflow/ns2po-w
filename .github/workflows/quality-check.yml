name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 8:00 AM UTC (10:00 AM CEST)
    - cron: '0 8 * * *'

env:
  PNPM_VERSION: 8.x

jobs:
  quality-check:
    name: Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarCloud analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm --filter election-mvp lint

      - name: Run TypeScript check
        run: pnpm --filter election-mvp type-check

      - name: Run tests
        run: pnpm --filter election-mvp test

      - name: Generate quality report
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: pnpm --filter election-mvp quality:report
        continue-on-error: true

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-report-${{ github.sha }}
          path: apps/election-mvp/quality-reports/
          retention-days: 30

      - name: Comment PR with quality summary
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'apps/election-mvp/quality-reports/latest.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              
              // Extract key metrics for PR comment
              const lines = report.split('\n');
              let summary = '## üìä Code Quality Summary\n\n';
              
              // Find metrics table
              let inTable = false;
              for (const line of lines) {
                if (line.includes('Issues par S√©v√©rit√©')) {
                  inTable = true;
                  continue;
                }
                if (inTable && line.startsWith('|') && !line.includes('S√©v√©rit√©')) {
                  summary += line + '\n';
                }
                if (inTable && line.trim() === '') {
                  break;
                }
              }
              
              summary += '\n[üìÑ Voir le rapport complet dans les artifacts]';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Job for security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          pnpm audit --json > audit-results.json || true
          
          if [ -s audit-results.json ]; then
            echo "‚ö†Ô∏è Security issues found - check audit-results.json"
          else
            echo "‚úÖ No security vulnerabilities detected"
          fi

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-${{ github.sha }}
          path: audit-results.json
          retention-days: 7